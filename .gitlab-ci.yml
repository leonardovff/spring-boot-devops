# variables:
#   DOCKER_DRIVER: overlay
#   SPRING_PROFILES_ACTIVE: gitlab-ci

stages:
  - test
  - build
  - production
  # - review

test: 
  image: maven:3.6.0-jdk-11-slim
  stage: test
  only: 
    - merge_requests
    - main
  tags:
    - docker-runner-imovel-ideal
  script:
    - mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent test jacoco:report
    - awk -F "," '
          {
            instructions += $4 + $5; covered += $5
          }
          END {
            print covered, "/", instructions, "instructions covered";
            printf "%.f%% covered\n", covered / instructions * 100
          }' target/site/jacoco/jacoco.csv
  artifacts: 
    paths: 
        - target/site/jacoco/
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml

app-build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  only: 
    - main
    - merge_requests
  tags:
    - docker-runner-imovel-ideal
  variables: 
    CONTAINER_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/app
  before_script: 
    - docker login $CI_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD 
  script:
    - docker build -t $CONTAINER_NAME -f ./docker-config/app/Dockerfile .
    - docker push $CONTAINER_NAME

loadbalance-build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  only: 
    - main
    - merge_requests
  tags:
    - docker-runner-imovel-ideal
  variables: 
    CONTAINER_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/loadbalance
  before_script: 
    - docker login $CI_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD 
  script:
    - docker build -t $CONTAINER_NAME ./docker-config/proxy
    - docker push $CONTAINER_NAME

deploy:
  stage: production
  environment: live
  only: 
    - main
  tags:
    - imovel-ideal-vm1-shell
  before_script:
    - docker login $CI_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD
  script: 
    # TODO: remove and use from gitlab variabless
    - cp -f $env /var/www/.env
    - cp -f docker-compose.production.yml /var/www/docker-compose.yml
    - cp -f $dbpassword /var/www/.dbpassword
    - cd /var/www
    - docker-compose pull
    - docker-compose up --remove-orphans -d
    - docker image prune
  after_script:
    - docker logout
    - rm -f -- /var/www/.dbpassword
    
# k8s-deploy:
#   image: google/cloud-sdk
#   stage: deploy
#   script:
#   - echo "$GOOGLE_KEY" > key.json
#   - gcloud auth activate-service-account --key-file key.json
#   - gcloud config set compute/zone europe-west1-c
#   - gcloud config set project actuator-sample
#   - gcloud config set container/use_client_certificate True
#   - gcloud container clusters get-credentials actuator-sample
#   - kubectl delete secret registry.gitlab.com
#   - kubectl create secret docker-registry registry.gitlab.com --docker-server=https://registry.gitlab.com --docker-username=marcolenzo --docker-password=$REGISTRY_PASSWD --docker-email=lenzo.marco@gmail.com
#   - kubectl apply -f deployment.yml
