# variables:
#   SPRING_PROFILES_ACTIVE: gitlab-ci

stages:
  - review
  - test
  - build
  - production
  - production-proxy
default:
  before_script: 
    - |
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        echo "setting APP_IMAGE=app:latest"
        APP_SLUG="production"
        APP_IMAGE="app:latest"
      else
        echo "setting APP_IMAGE=app-review:BRANCH_NAME"
        APP_SLUG="${CI_COMMIT_REF_NAME/\//"-"}"
        APP_IMAGE="app-review:"$CI_ENVIRONMENT_SLUG
      fi
    - CONTAINER_NAME=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$APP_IMAGE
    - docker login $CI_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD 

test: 
  image: maven:3.6.0-jdk-11-slim
  stage: test
  only: 
    - merge_requests
    - main
  tags:
    - docker-runner-imovel-ideal
  before_script:
    - echo "init test"
  script:
    - mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent test jacoco:report
    - awk -F "," '
          {
            instructions += $4 + $5; covered += $5
          }
          END {
            print covered, "/", instructions, "instructions covered";
            printf "%.f%% covered\n", covered / instructions * 100
          }' target/site/jacoco/jacoco.csv
    - echo 'end'
  artifacts: 
    paths: 
        - target/site/jacoco/
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml

app-build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  only: 
    - main
    - merge_requests
  tags:
    - docker-runner-imovel-ideal
  script:
    - echo $CONTAINER_NAME
    - docker build -t $CONTAINER_NAME -f ./docker-config/app/Dockerfile .
    - docker push $CONTAINER_NAME

review:
  stage: review
  environment: 
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.review.imovelideal.lvff.me
  only: 
    - merge_requests
  tags:
    - imovel-ideal-vm1-shell
  variables: 
    WORKDIR_PATH: /var/www/review-$CI_ENVIRONMENT_SLUG
    APP_HOSTNAME: $CI_ENVIRONMENT_SLUG.review.imovelideal.lvff.me
  script:
    - echo $APP_IMAGE
    - echo $WORKDIR_PATH
    - echo $APP_HOSTNAME
    - mkdir -p $WORKDIR_PATH
    - cp -f $env $WORKDIR_PATH/.env
    - printf  "\nAPP_IMAGE=$APP_IMAGE" >> .env
    - cp -f docker-compose.production.yml $WORKDIR_PATH/docker-compose.yml
    - cp -f $dbpassword $WORKDIR_PATH/.dbpassword
    - cd $WORKDIR_PATH
    - docker-compose pull
    - docker-compose --compatibility up --remove-orphans -d
    - docker image prune -f
  after_script:
    - docker logout
    - rm -f -- $WORKDIR_PATH/.dbpassword

deploy:
  stage: production
  environment: 
    name: live
    url: http://imovelideal.lvff.me
  only: 
    - main
  tags:
    - imovel-ideal-vm1-shell
  variables: 
    WORKDIR_PATH: /var/www/production
  before_script:
    - docker login $CI_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD
  script: 
    - cp -f $env $WORKDIR_PATH/.env
    - cp -f docker-compose.production.yml $WORKDIR_PATH/docker-compose.yml
    - cp -f $dbpassword $WORKDIR_PATH/.dbpassword
    - cd $WORKDIR_PATH
    - docker-compose pull
    - docker-compose --compatibility up --remove-orphans -d
    - docker image prune -f
  after_script:
    - docker logout
    - rm -f -- $WORKDIR_PATH/.dbpassword

deploy-traefik:
  stage: production-proxy
  only: 
    - main
  needs: []
  when: manual
  tags:
    - imovel-ideal-vm1-shell
  variables: 
    WORKDIR_PATH: /var/www/traefik
  before_script:
    - echo "COMPOSE_PROJECT_NAME=imovel-ideal" > $WORKDIR_PATH/.env
    - cp -f traefik-compose.yml $WORKDIR_PATH/docker-compose.yml
  script:
    - cd $WORKDIR_PATH
    - docker-compose pull
    - docker-compose up --remove-orphans -d
    - docker image prune -f